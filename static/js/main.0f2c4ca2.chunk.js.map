{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","a","fetch","response","json","data","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAIaA,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACA,uBAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,KCFnEI,G,MAAO,SAAAC,GACjB,OACC,sBAAKJ,UAAU,iBAAf,UACI,qBAAKK,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKJ,EAAME,QAAQG,OACnB,4BAAIL,EAAME,QAAQI,aCLbC,G,MAAW,SAAAP,GACpB,OACA,sBAAKJ,UAAU,YAAf,cAA6BI,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,YCC5EO,E,kDACJ,aAAc,IAAD,8BACX,gBAgBFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IALJ,E,4FASb,8BAAAI,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQC,EAFR,OAGEC,QAAQC,IAAIF,GACZG,KAAKZ,SAAS,CAACJ,SAAUa,IAJ3B,gD,0EAaA,WACE,MAA+BG,KAAKR,MAA7BR,EAAP,EAAOA,SAASK,EAAhB,EAAgBA,YACVY,EAAmBjB,EAASkB,QAAO,SAAAxB,GAAO,OAAIA,EAAQG,KAAKsB,cAAcC,SAASf,EAAYc,kBAEpG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWF,YAAY,iBAAiBC,aAAc6B,KAAK7B,eAC3D,cAAC,EAAD,CAAUa,SAAUiB,W,GA/BVI,aAsCHnB,ICjCAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f2c4ca2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./card.styles.css\"\r\n\r\n\r\nexport const Card = props => {\r\n   return( \r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n   )\r\n}","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = props => {\r\n    return ( \r\n    <div className=\"card-list\"> {props.monsters.map(monster => <Card key={monster.id} monster={monster}></Card>)}</div>\r\n    )\r\n}","import { Component } from 'react';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n  }\n\n  async componentDidMount(){\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    console.log(data);\n    this.setState({monsters: data});\n  }\n\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n\n  render() {\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"monster search\" handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}